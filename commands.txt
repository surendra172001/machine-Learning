% -> comment
not -> ~
xor -> xor(value1, value2)

matrix = [
 1 2;  %first row
 3 4;  %second row
]

column vector

v = [1 2 3]

row vector
v = [
	1;
	2;
	3;
	4;
]




creating vector with elements in a given range and fixed difference between 2 consecutive elements

v = [startNum : step : endNum]

startNum and endNum both are inclusive
e.g.

v1 = [1: 0.1 : 1.5]
op -> 
1.0000    1.1000    1.2000    1.3000    1.4000    1.5000

v2 = [1 : 2 : 10]
op ->
1 3 5 7 9


ones(2, 3)
ans =

   1   1   1
   1   1   1




zeros(1, 3)
ans =

   0   0   0


rand(1, 3)
0.0853913   0.6435051   0.0057563

rand(1, 3)
0.66739   0.56822   0.98349

rand(2, 3)
   0.038551   0.459716   0.614149
   0.251368   0.545643   0.625049




.*, ./ -> elementwise multiplication in a matrix

log(v) elementwise logarithm

exp(v) elementwise exponentiation

abs(v) gives the matrix that contains the absolute values of all the elements in matrix v

max(v) returns the columnwise maximum in matrix v

v < 3 does the element wise comparison with elemnts of v and the matrix containg values 0 and 1

find(v < 3) compares all the element of matrix and the indexes of all the elements that satisfy the condition
(The indexing is done in top-to-bottom manner columnwise)
e.g.
1 4 7
2 5 8
3 6 9


a = magic(3)

[r, c] = find(A <= 7)


sum(a) do column wise sum of all the elements in the matrix a

prod(a) returns product of all the elements of a

floor()
ceil()

max(A, [], 1)
max(A, [], 2)


clf -> clear figure

flipup()



ho5ewdNQtsMNwjnU
